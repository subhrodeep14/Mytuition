// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  name     String
  email    String   @unique
  image    String?
  role     Role     @default(STUDENT)
  teacher  Teacher?
  reviews  Review[]
  sessions Session[]
  createdAt DateTime @default(now())
}

enum Role {
  STUDENT
  TEACHER
}

model Teacher {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  bio        String
  subjects   String[]
  rate       Float
  mode       Mode
  city       String
  photoUrl   String?
  reviews    Review[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sessions   Session[]
  availability String[] // Array of ISO date strings representing available times
  languages  String[] // Array of languages spoken by the teacher
  education  String? // Education details of the teacher
  experience Int? // Years of teaching experience
  certifications String[] // Array of certifications held by the teacher
  ratings   Float? // Average rating of the teacher
  isVerified Boolean @default(false) // Whether the teacher's profile is verified
  reviewsCount Int @default(0) // Number of reviews received
  timezone   String // Timezone of the teacher, e.g., "America/New_York
}

enum Mode {
  ONLINE
  OFFLINE
  BOTH
}

model Review {
  id        String   @id @default(cuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String
  comment   String
  rating    Int
  createdAt DateTime @default(now())
}
model Session {
  id        String   @id @default(cuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String
  date      DateTime
  duration  Int      // Duration in minutes
  createdAt DateTime @default(now())
}